package com.action;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.OutputFormat;import org.dom4j.io.XMLWriter;import utils.DB;import utils.MD5;import utils.Xml;import utils.random.RandomString;import jxl.Sheet;import jxl.Workbook;import jxl.read.biff.BiffException;import jxl.write.Label;import jxl.write.WritableSheet;import jxl.write.WritableWorkbook;import jxl.write.WriteException;import jxl.write.biff.RowsExceededException;import com.bean.BeanClassInfo;import com.bean.BeanGrade;import com.bean.BeanStudentInfo;/** * 此类用于批量预注册学生信息<p> *   (用于一个年级全部学生的预注册)<p> *   配置文件说明<p> *       class.xml<p> *          1.第一条为<grade value="?" /> value为年级<p> *          2.其余各条为<class name="一班" value="1" num="30" /><p> *              name值可任意, 但value不可乱动, value值为1,即为1班,以此类推, num为班级人数<p> *       conf.xml<p> *           此为数据库连接配置, 配置较为常规, 且基本不用修改, 不做说明<p> *       student.xls<p> *           此为学生信息表格(必须是97-03版本excel)<p> *           数据为三列<p> *             第一列为学号, 严格保证, 不可重复(程序不验证学号是否重复)<p> *             第二列为姓名, 无严格设置, 数据库要求15汉字以内(如有冲突, 则需告知, 扩大数据库的字段的长度)<p> *             第三列为班级, 此处的班级名字应该与class.xml的第二条中的name一致, 应该严格保证, 否则无法把该学生导入对应班级中<p> *             第四列为入学专业，规定入学专业名称如下：{土木工程学院,机械工程学院,电气工程学院,信息科学与技术学院,交通运输与物流学院,材料科学与工程学院,力学与工程学院,其他学院} *             程序运行后会产生第五列, 随机密码, 是用户激活账号时随用的密码<p> *             注:1.每一列的第一行为该列标签, 程序不做处理, 名字可任意<p> *               2.对应信息必须在对应位置, 否则数据库中的信息会变乱<p> *    操作说明<p> *      1. 调用getClassInfo(), 从class.xml中获取班级信息<p> *      2. 调用putClass(), 把第一步取得的数据存入数据库, 同时读取存入数据库之后的班级编号<p> *      3. 调用getStudentInfo(), 从student.xls中读取学生信息<p> *      4. 调用replaceClassInfo(), 用(2)和(3)所得到得到数据 ,把学生信息中的班级名字替换成班级在数据库中的名字<p> *      5. 调用getRandomPassword(), 产生8位随机密码, 同时MD5加密随机密码<p> *      6. 调用putIntoExcle(), 把8位随机密码写入excel<p> *      7. 调用putStudent(), 把学生信息(包括加密的随机密码)写入数据库<p> *  * @author xueming * @version 1.0.0 */public class InputStudentList {		private static final String INFOFILE = "student.xls";	private static final String CLASSINFO = "class.xml";	private static final String TABLECLASS = "`_Class_Info`";	private static final String TABLELOGIN = "`_Login_Info`";	private static final String TABLESTUDENT = "`_User_Student_Info`";		private static Connection conn;	private static PreparedStatement pre;	private static ResultSet res;		/**	 * 获取班级与班级编号对应的配置 	 * @param year 返回班级的年级	 * @return info	 */	public static BeanGrade getGradeInfo() {		BeanGrade grade = new BeanGrade();		List<BeanClassInfo> info = new ArrayList<BeanClassInfo>();		BeanClassInfo cl;		Document doc = Xml.read(CLASSINFO);				// 年级信息		Element node = (Element)doc.selectSingleNode("/Context/grade");		grade.setGarde(node.attributeValue("value"));				// 班级名字和班级编号对应		List<Element> list = doc.selectNodes("/Context/class");		for (Element item : list) {			cl = new BeanClassInfo();			cl.setId(Integer.valueOf(item.attributeValue("value")));			cl.setName(item.attributeValue("name"));			cl.setNum(item.attributeValue("num"));						cl.setClassid(item.attributeValue("classid"));			cl.setClassname(item.attributeValue("classname"));			info.add(cl);		}		grade.setClassList(info);				return grade;	}		/**	 * 按照  2012年1班 的格式构造班级实际名称<p>	 * 按照 201201 的格式构造班级的数据库编号<p>	 * @param grade	 */	public static void compClassInfo(BeanGrade grade) {				String year = grade.getGarde();		String temp = "#year年#id班".replace("#year", year);		List<BeanClassInfo> classList = grade.getClassList();				for (BeanClassInfo item : classList) {			// 班级实际名称			item.setClassname(temp.replace("#id", item.getId() + ""));			// 生成班级数据库编号			item.setClassid(year + dubDig(item.getId())); 		}	}		/**	 * 把整数转化成两位的字符串	 * @param val	 */	public static String dubDig(int val) {		String rs = String.valueOf(val);		if (rs.length() == 1) {			rs = "0" + rs;		}		return rs;	}		/**	 * 检查是否存在该年级的班级	 * @param year 年级	 * @return flag 只要存在该年级的一个班级就返回True	 */	public static boolean isGradeExist(String year) {				boolean flag = false;		conn = DB.getConnection();		String sql = "SELECT COUNT(*) FROM " + TABLECLASS + "WHERE `classname` LIKE ?";		try {			pre = DB.prepare(conn, sql);			pre.setString(1, "%" + year + "%");			res = pre.executeQuery();			res.next();						if (res.getInt(1) != 0) {				flag = true;			}			close();		} catch (SQLException e) {			e.printStackTrace();		}				return flag;	}		/**	 * 在数据库里添加该年级的班级信息	 * @param grade 该年级的数据	 */	public static boolean putClass(BeanGrade grade) {				// 查看是否有这一年的班级		if (isGradeExist(grade.getGarde())) {			return false;		}				boolean flag = true;		boolean defaultValue = false;		String sql = "INSERT INTO " + TABLECLASS + " (`classid`, `classname`, `num`) VALUES (?, ?, ?);";		List<BeanClassInfo> list = grade.getClassList();		conn = DB.getConnection();				// 开始存数据		try {			defaultValue = conn.getAutoCommit();			conn.setAutoCommit(false);			conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);						for (BeanClassInfo item : list) {				pre = DB.prepare(conn, sql);				pre.setString(1, item.getClassid());				pre.setString(2, item.getClassname());				pre.setString(3, item.getNum());								pre.executeUpdate();				DB.close(pre);			}						conn.commit();		} catch (SQLException e) {			flag = false;			try {				conn.rollback();			} catch (SQLException e1) {				e1.printStackTrace();			}			e.printStackTrace();		} finally {			try {				conn.setAutoCommit(defaultValue);			} catch (SQLException e) {				e.printStackTrace();			}		}		close();		return flag;	}		/**	 * 关闭数据库连接	 */	private static void close() {		try {			DB.close(res);			DB.close(pre);			DB.close(conn);		} catch (SQLException e) {			e.printStackTrace();		}	}		/**	 * 判断 班级配置文件是否程序更新过, <p>	 * 即该年级的班级数据是否存入数据库<p>	 * true: 已经写入 xml<p>	 * false:没有写入xml<p>	 */	public static boolean isClassWrited() {		Document doc = Xml.read(CLASSINFO);		return doc.selectSingleNode("//class/@classname") != null;	}		/**	 * 把班 级实际名字 和 班级数据库编号 写入xml文件<p>	 * 注：1. 操作前首先成功写入数据库<p>	 * 注：2. 操作前首先检验是否写入过xml<p>	 * @param grade	 */	public static boolean writeUpdateClassInfo(BeanGrade grade) {				Document doc = Xml.read(CLASSINFO);				List<Element> xmlList = doc.selectNodes("//class");		List<BeanClassInfo> classList = grade.getClassList();		for (Element e : xmlList) {			int id = Integer.parseInt(e.attributeValue("value"));			for (BeanClassInfo item : classList) {				if (id == item.getId()) {					e.addAttribute("classid", item.getClassid());					e.addAttribute("classname", item.getClassname());				}			}		}				// 写入xml		OutputFormat format = OutputFormat.createPrettyPrint();		format.setEncoding("UTF-8");		try {			XMLWriter output = new XMLWriter(new FileWriter( new File(CLASSINFO) ), format);			output.write(doc);			output.close();		} catch (IOException e1) {			e1.printStackTrace();		}				return false;	}		/**	 * 获取学生信息所在的excel表格的工作区 D	 * @return	 */	private static Sheet getStudentInfoSheet() {		try {			Workbook book = Workbook.getWorkbook(new File(INFOFILE));			Sheet sheet = book.getSheet(0);			return sheet;		} catch (BiffException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		return null;	}		/**	 * 获取学生信息ArrayList列表	 */	public static ArrayList<BeanStudentInfo> getStudentInfo() {		ArrayList<BeanStudentInfo> list = new ArrayList<BeanStudentInfo>();		BeanStudentInfo item;		Sheet sheet = getStudentInfoSheet();		int row = sheet.getRows();		for (int i = 1; i < row; i ++) {			item = new BeanStudentInfo();			item.setId(sheet.getCell(0, i).getContents());			item.setName(sheet.getCell(1, i).getContents());			item.setClassNum(sheet.getCell(2, i).getContents());			item.setAdmitMajor(sheet.getCell(3,i).getContents());			list.add(item);		}		return list;	}		/**	 * 替换学生信息用的班级信息(换成班级对应的编号-数据库中的编号，方便处理)<p>	 * 注：1.先调用compClassInfo	 * @param list	 * @param grade	 */	public static void updateStdClassInfo(ArrayList<BeanStudentInfo> list, BeanGrade grade) {				List<BeanClassInfo> classList = grade.getClassList();		String name = "";		for (BeanStudentInfo item : list) {			name = item.getClassNum();			for (BeanClassInfo classInfo : classList) {				if (name.equals(classInfo.getName())) {					item.setClassNum(classInfo.getClassid());					break;				}			}		}	}		/**	 * 产生8为随机密码 && 这8为随机密码的MD5加密 D	 * @param list 学生信息	 */	public static void getRandomPassword(ArrayList<BeanStudentInfo> list) {		RandomString.getInstance();		for(BeanStudentInfo item : list) {			item.setPwdRandom(RandomString.random(8));			item.setPwdMD5(MD5.getMD5ofStr(item.getPwdRandom()));		}	}		/**	 * 把密码写入excel	 * @param list 学生信息对象	 */	public static void putIntoExcle(ArrayList<BeanStudentInfo> list) {		try {			Workbook book = Workbook.getWorkbook(new File(INFOFILE));			WritableWorkbook rbook = Workbook.createWorkbook(new File(INFOFILE), book);			Label label = null;			WritableSheet sheet = rbook.getSheet(0);			// 设置密码一栏的标签			label = new Label(4, 0, "随机密码");			sheet.addCell(label);			// 写入密码			int num = 0;			for (BeanStudentInfo item : list) {				num ++;				label = new Label(4, num, item.getPwdRandom());				sheet.addCell(label);			}						// 写入文件			rbook.write();			rbook.close();			book.close();					} catch (BiffException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		} catch (RowsExceededException e) {			e.printStackTrace();		} catch (WriteException e) {			e.printStackTrace();		}	}		/***	 * 把学生信息写入数据库	 * @param stdList 学生信息列表	 * @return	 */	public static boolean putStudent(List<BeanStudentInfo> stdList) {				boolean flag = true;		boolean defaultValue = false;		String sql1 = "", sql2 = "";		conn = DB.getConnection();		try {			defaultValue = conn.getAutoCommit();			conn.setAutoCommit(false);			conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);			sql1 = "INSERT INTO " + TABLELOGIN + " (`UserId`, `UserName`, `pwd`, `AccTyp`, `IsVery`) VALUES (?, ?, ?, ?, ?)";			sql2 = "INSERT INTO " + TABLESTUDENT + " (`UserId`, `classid`,`admitmajor`) VALUES (?, ?,?)";						for (BeanStudentInfo item : stdList) {				item.setId(item.getId());				pre = DB.prepare(conn, sql1);				pre.setString(1, item.getId());				pre.setString(2, item.getName());				pre.setString(3, item.getPwdMD5());				pre.setInt(4, 0);				pre.setInt(5, 0);				pre.execute();				DB.close(pre);								pre = DB.prepare(conn, sql2);				pre.setString(1, item.getId());				pre.setString(2, item.getClassNum());				pre.setString(3, item.getAdmitMajor());				pre.execute();				DB.close(pre);			}			conn.commit();		} catch (SQLException e) {			flag = false;			try {				conn.rollback();			} catch (SQLException e1) {				e1.printStackTrace();			}			e.printStackTrace();		} finally {			try {				conn.setAutoCommit(defaultValue);			} catch (SQLException e) {				e.printStackTrace();			}		}		close();		return flag;	}}